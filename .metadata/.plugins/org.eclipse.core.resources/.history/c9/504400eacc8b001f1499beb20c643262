package com.services.ConfigService.config;

import org.springframework.cloud.config.environment.Environment;
import org.springframework.cloud.config.server.environment.JdbcEnvironmentRepository;
import org.springframework.jdbc.core.JdbcTemplate;

import com.services.ConfigService.entities.ConfigProperty;
import com.services.ConfigService.services.PropertyService;
import org.springframework.cloud.config.environment.PropertySource;
import org.springframework.cloud.config.server.environment.JdbcEnvironmentProperties;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class CustomJdbcEnvironmentRepository extends JdbcEnvironmentRepository {

	private final CustomPropertiesResultSetExtractor extractor;
	
	private final JdbcTemplate jdbcTemplate;

    public CustomJdbcEnvironmentRepository(JdbcTemplate jdbcTemplate, JdbcEnvironmentProperties properties, CustomPropertiesResultSetExtractor extractor) {
        super(jdbcTemplate, properties);
        this.extractor = extractor;
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Environment findOne(String application, String profile, String label) {
        // Use the extractor to retrieve properties from the database
    	 if (profile == null) {
    	        profile = "default"; // Fallback to default profile
    	    }

    	    List<Property> properties = jdbcTemplate.query(
    	            "SELECT `key`, `value` FROM properties WHERE `application` = ? AND `profile` = ? AND `label` = ?",
    	            extractor,
    	            application, profile, label
    	    );

    	    List<PropertySource> propertySources = new ArrayList<>();

    	    // Create a map to hold the properties
    	    HashMap<String, Object> propertyMap = new HashMap<>();

    	    for (Property property : properties) {
    	        propertyMap.put(property.getKey(), property.getValue());
    	    }

    	    // Add a PropertySource using the application name as the source name
    	    propertySources.add(new PropertySource(application, propertyMap));

        Environment environment = new Environment(application, profile, label);
        environment.addAll(propertySources); // Add property sources

        return environment;
    }
}

