package com.services.UserService.controllers;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.services.UserService.dtos.UserInfo;
import com.services.UserService.dtos.UserInfoResponse;
import com.services.UserService.entities.Role;
import com.services.UserService.entities.User;
import com.services.UserService.services.UserService;
import com.services.UserService.utils.JwtUtil;

import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("/api/userProfile")
@CrossOrigin("*")
@SecurityRequirement(name = "BearerAuth") // Should match the SecurityScheme name
@Tag(name = "User APIs")
public class UserProfileController {

	@Autowired
	private UserService userService;

	@Autowired
	private JwtUtil jwtUtil;

	public String getUsernameFromLoggedInToken(String authorizationHeader) {
		String username = null;
		if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
			String token = authorizationHeader.substring(7);
			if (jwtUtil.validateToken(token)) {
				username = jwtUtil.extractUsername(token);
			} else {
				username = "Invalid Token";
			}
		}
		return username;
	}

	@GetMapping("/userDetails")
	public ResponseEntity<UserInfoResponse> getUserDetails(
			@RequestHeader(value = HttpHeaders.AUTHORIZATION, required = false) @Parameter(hidden = true) String authorizationHeader) {
		UserInfoResponse userInfoResponse = new UserInfoResponse();
		UserInfo userInfo = new UserInfo();
		String username = getUsernameFromLoggedInToken(authorizationHeader);
		if (username.equals("Invalid Token")) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		Optional<User> user = userService.findByUsername(username);
		if (user.isPresent()) {
			userInfo.setId(user.get().getId());
			userInfo.setUsername(user.get().getUsername());
			userInfo.setRole(user.get().getRoles());
			userInfoResponse.setSuccess(true);
			userInfoResponse.setMessage("Logged in user info fetched successfully.");
			userInfoResponse.setUserInfo(userInfo);
			return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.OK);
		} else {
			userInfo = null;
			userInfoResponse.setSuccess(false);
			userInfoResponse.setMessage("User not found.");
			userInfoResponse.setUserInfo(null);
			return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/userDetails/{id}")
	public ResponseEntity<UserInfoResponse> getUserDetailsById(
			@RequestHeader(value = HttpHeaders.AUTHORIZATION, required = false) @Parameter(hidden = true) String authorizationHeader,
			@PathVariable("id") Long id) {
		UserInfoResponse userInfoResponse = new UserInfoResponse();
		UserInfo userInfo = new UserInfo();
		String username = getUsernameFromLoggedInToken(authorizationHeader);
		if (username.equals("Invalid Token")) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		User user = userService.getUserInfoById(id);
		if (user != null) {
			userInfo.setId(user.getId());
			userInfo.setUsername(user.getUsername());
			userInfo.setRole(user.getRoles());
			userInfoResponse.setSuccess(true);
			userInfoResponse.setMessage("User info with id: " + id + " fetched successfully.");
			userInfoResponse.setUserInfo(userInfo);
			return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.OK);
		} else {
			userInfo = null;
			userInfoResponse.setSuccess(false);
			userInfoResponse.setMessage("User not found.");
			userInfoResponse.setUserInfo(null);
			return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.NOT_FOUND);
		}

	}
	
	@PutMapping("/updateUserRoleToAdmin/{id}")
	public ResponseEntity<UserInfoResponse> updateUserRoleToAdminById(
			@RequestHeader(value = HttpHeaders.AUTHORIZATION, required = false) @Parameter(hidden = true) String authorizationHeader,
			@PathVariable("id") Long id) {
		UserInfoResponse userInfoResponse = new UserInfoResponse();
		UserInfo userInfo = new UserInfo();
		String username = getUsernameFromLoggedInToken(authorizationHeader);
		if (username.equals("Invalid Token")) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		User user = userService.getUserInfoById(id);
		if (user != null) {
			User updatedUser = userService.updateUserRoleToAdminById(id);
			if(updatedUser != null && user.getRoles().equals(Role.USER)) {
				userInfo.setId(updatedUser.getId());
				userInfo.setUsername(updatedUser.getUsername());
				userInfo.setRole(updatedUser.getRoles());
				userInfoResponse.setSuccess(true);
				userInfoResponse.setMessage("User info with id: " + id + " fetched successfully.");
				userInfoResponse.setUserInfo(userInfo);
				return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.OK);
			}
			else {
				userInfo.setId(updatedUser.getId());
				userInfo.setUsername(updatedUser.getUsername());
				userInfo.setRole(updatedUser.getRoles());
				userInfoResponse.setSuccess(false);
				userInfoResponse.setMessage("User with id: "+ id + " is already admin.");
				userInfoResponse.setUserInfo(userInfo);
				return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.NOT_FOUND);
			}
		} else {
			userInfo = null;
			userInfoResponse.setSuccess(false);
			userInfoResponse.setMessage("User not found.");
			userInfoResponse.setUserInfo(null);
			return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.NOT_FOUND);
		}
	}
	
	@PutMapping("/updateUserRoleToUser/{id}")
	public ResponseEntity<UserInfoResponse> updateUserRoleToUserById(
			@RequestHeader(value = HttpHeaders.AUTHORIZATION, required = false) @Parameter(hidden = true) String authorizationHeader,
			@PathVariable("id") Long id) {
		UserInfoResponse userInfoResponse = new UserInfoResponse();
		UserInfo userInfo = new UserInfo();
		String username = getUsernameFromLoggedInToken(authorizationHeader);
		if (username.equals("Invalid Token")) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		User user = userService.getUserInfoById(id);
		if (user != null) {
			User updatedUser = userService.updateUserRoleToUserById(id);
			if(updatedUser != null && user.getRoles().equals(Role.USER)) {
				userInfo.setId(updatedUser.getId());
				userInfo.setUsername(updatedUser.getUsername());
				userInfo.setRole(updatedUser.getRoles());
				userInfoResponse.setSuccess(true);
				userInfoResponse.setMessage("User info with id: " + id + " fetched successfully.");
				userInfoResponse.setUserInfo(userInfo);
				return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.OK);
			}
			else {
				userInfo.setId(updatedUser.getId());
				userInfo.setUsername(updatedUser.getUsername());
				userInfo.setRole(updatedUser.getRoles());
				userInfoResponse.setSuccess(false);
				userInfoResponse.setMessage("User with id: "+ id + " is already user.");
				userInfoResponse.setUserInfo(userInfo);
				return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.NOT_FOUND);
			}
		} else {
			userInfo = null;
			userInfoResponse.setSuccess(false);
			userInfoResponse.setMessage("User not found.");
			userInfoResponse.setUserInfo(null);
			return new ResponseEntity<UserInfoResponse>(userInfoResponse, HttpStatus.NOT_FOUND);
		}
	}

}
