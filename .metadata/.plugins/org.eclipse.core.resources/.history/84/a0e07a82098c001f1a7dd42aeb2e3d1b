package com.services.BlogService.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;

import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class WebSecurityConfig {

	@Autowired
	private JwtAuthenticationFilter jwtAuthenticationFilter;

	@SuppressWarnings("removal")
	@Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable)
            .cors(cors -> cors.configurationSource(request -> {
                CorsConfiguration config = new CorsConfiguration();
                config.setAllowCredentials(true);
                config.addAllowedOrigin("*"); // Adjust as needed
                config.addAllowedHeader("*");
                config.addAllowedMethod("*");
                return config;
            }))
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/v2/api-docs", "/v3/api-docs", 
                                 "/v3/api-docs/**", "/swagger-resources", 
                                 "/swagger-resources/**", "/configuration-ui", 
                                 "/configuration-security", "/swagger-ui/**", 
                                 "/webjars/**", "/swagger-ui.html")
                .permitAll()
                .requestMatchers("/api/blogs/**")
                .authenticated()
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); // Add your filter

        return http.build();
    }

}
