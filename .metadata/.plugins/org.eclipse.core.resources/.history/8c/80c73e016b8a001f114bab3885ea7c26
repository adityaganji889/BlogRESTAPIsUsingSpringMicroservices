package com.services.UserService.controllers;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.services.UserService.dtos.UserInfo;
import com.services.UserService.dtos.UserInfoResponse;
import com.services.UserService.entities.User;
import com.services.UserService.services.UserService;
import com.services.UserService.utils.JwtUtil;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("/api/userProfile")
public class UserProfileController {

	@Autowired
    private UserService userService;

    @Autowired
    private JwtUtil jwtUtil;
    
    
    @GetMapping("/protected-resource")
    public ResponseEntity<String> getProtectedResource(@RequestHeader(HttpHeaders.AUTHORIZATION) String authorizationHeader) {
        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            String token = authorizationHeader.substring(7);
            String username = jwtUtil.extractUsername(token);
            
            if (jwtUtil.validateToken(token)) {
                return ResponseEntity.ok("Protected Resource Accessed");
            }
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Unauthorized");
    }
    
    @GetMapping("/userInfo")
    public ResponseEntity<UserInfoResponse> getUserInfo() {
    	
    	UserInfoResponse userInfoResponse = new UserInfoResponse();
    	UserInfo userInfo = new UserInfo();
    	User user = userService.getUserInfo();
    	if(user!=null) {
    		userInfo.setId(user.getId());
    		userInfo.setUsername(user.getUsername());
    		userInfo.setRole(user.getRoles());
    		userInfoResponse.setSuccess(true);
    		userInfoResponse.setMessage("Logged in user info fetched successfully.");
    	    userInfoResponse.setUserInfo(userInfo);
    	    return new ResponseEntity<UserInfoResponse>(userInfoResponse,HttpStatus.OK);
    	}
    	else {
    		userInfo = null;
    		userInfoResponse.setSuccess(false);
    		userInfoResponse.setMessage("User not found.");
    	    userInfoResponse.setUserInfo(null);
    		return new ResponseEntity<UserInfoResponse>(userInfoResponse,HttpStatus.NOT_FOUND);
    	}
    	
    }
    
    
	
}
